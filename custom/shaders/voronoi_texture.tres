[gd_resource type="VisualShader" load_steps=9 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "camera"

[sub_resource type="VisualShaderNodeGlobalExpression" id=2]
size = Vector2( 575, 400 )
expression = "/* Generic Noise 3 by PatricioGonzalezVivo
@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
|----------------------------------------------------------------*/
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise3(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}


/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_voronoi.glsl
_________________________________________________________________________________________________________________________________________*/

/*_ Voronoi func _*/

float smoothVoronoi(vec3 coords, float scale, float randomness, float smoothness) {
    randomness = clamp(randomness, 0.0, 1.0);
    smoothness = clamp(smoothness/2.0,  0.0, 0.5);
    vec3 cell_position = floor(coords * scale);
    vec3 local_position = (coords * scale) - floor(coords * scale);

    float smooth_distance = 8.0;
    vec3 smooth_position = vec3(0.0);

    for (int k = -2; k <= 2; k++) {
        for (int j = -2; j <= 2; j++) {
            for (int i = -2; i <= 2; i++) {
                
                vec3 cell_offset = vec3(float(i), float(j), float(k));
                vec3 point_position = cell_offset + noise3(cell_position + cell_offset) * randomness;
                float distance_to_point = distance(point_position, local_position);
                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smooth_distance - distance_to_point) / smoothness);
                float correction_factor = smoothness * h * (1.0 - h);
                smooth_distance = mix(smooth_distance, distance_to_point, h) - correction_factor;

            }
        }
    }
    return smooth_distance;
}"

[sub_resource type="VisualShaderNodeExpression" id=3]
size = Vector2( 685, 342 )
expression = "Fac = smoothVoronoi(Vector, Scale, Randomness, Smoothness);"

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 3.0

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 50.0

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 0.03

[sub_resource type="VisualShaderNodeTransformVecMult" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;



// GlobalExpression:0
	/* Generic Noise 3 by PatricioGonzalezVivo
	@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
	|----------------------------------------------------------------*/
	vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
	vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}
	
	float noise3(vec3 p){
	    vec3 a = floor(p);
	    vec3 d = p - a;
	    d = d * d * (3.0 - 2.0 * d);
	
	    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
	    vec4 k1 = perm(b.xyxy);
	    vec4 k2 = perm(k1.xyxy + b.zzww);
	
	    vec4 c = k2 + a.zzzz;
	    vec4 k3 = perm(c);
	    vec4 k4 = perm(c + 1.0);
	
	    vec4 o1 = fract(k3 * (1.0 / 41.0));
	    vec4 o2 = fract(k4 * (1.0 / 41.0));
	
	    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
	    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);
	
	    return o4.y * d.y + o4.x * (1.0 - d.y);
	}
	
	
	/* === Based on The Blender Foundation shader
	@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_voronoi.glsl
	_________________________________________________________________________________________________________________________________________*/
	
	/*_ Voronoi func _*/
	
	float smoothVoronoi(vec3 coords, float scale, float randomness, float smoothness) {
	    randomness = clamp(randomness, 0.0, 1.0);
	    smoothness = clamp(smoothness/2.0,  0.0, 0.5);
	    vec3 cell_position = floor(coords * scale);
	    vec3 local_position = (coords * scale) - floor(coords * scale);
	
	    float smooth_distance = 8.0;
	    vec3 smooth_position = vec3(0.0);
	
	    for (int k = -2; k <= 2; k++) {
	        for (int j = -2; j <= 2; j++) {
	            for (int i = -2; i <= 2; i++) {
	                
	                vec3 cell_offset = vec3(float(i), float(j), float(k));
	                vec3 point_position = cell_offset + noise3(cell_position + cell_offset) * randomness;
	                float distance_to_point = distance(point_position, local_position);
	                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smooth_distance - distance_to_point) / smoothness);
	                float correction_factor = smoothness * h * (1.0 - h);
	                smooth_distance = mix(smooth_distance, distance_to_point, h) - correction_factor;
	
	            }
	        }
	    }
	    return smooth_distance;
	}

void vertex() {
// Output:0

}

void fragment() {
// Input:10
	mat4 n_out10p0 = CAMERA_MATRIX;

// Input:9
	vec3 n_out9p0 = VERTEX;

// TransformVectorMult:8
	vec3 n_out8p0 = (n_out10p0 * vec4(n_out9p0, 1.0)).xyz;

// Scalar:5
	float n_out5p0 = 3.000000;

// Scalar:6
	float n_out6p0 = 50.000000;

// Scalar:7
	float n_out7p0 = 0.030000;

// Expression:3
	float n_out3p0;
	n_out3p0 = 0.0;
	{
		n_out3p0 = smoothVoronoi(n_out8p0, n_out5p0, n_out6p0, n_out7p0);
	}

// Output:0
	ALBEDO = vec3(n_out3p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1245, 434 )
nodes/fragment/0/position = Vector2( 240, 480 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -660, 100 )
nodes/fragment/2/size = Vector2( 575, 400 )
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = ""
nodes/fragment/2/expression = "/* Generic Noise 3 by PatricioGonzalezVivo
@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
|----------------------------------------------------------------*/
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise3(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}


/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_voronoi.glsl
_________________________________________________________________________________________________________________________________________*/

/*_ Voronoi func _*/

float smoothVoronoi(vec3 coords, float scale, float randomness, float smoothness) {
    randomness = clamp(randomness, 0.0, 1.0);
    smoothness = clamp(smoothness/2.0,  0.0, 0.5);
    vec3 cell_position = floor(coords * scale);
    vec3 local_position = (coords * scale) - floor(coords * scale);

    float smooth_distance = 8.0;
    vec3 smooth_position = vec3(0.0);

    for (int k = -2; k <= 2; k++) {
        for (int j = -2; j <= 2; j++) {
            for (int i = -2; i <= 2; i++) {
                
                vec3 cell_offset = vec3(float(i), float(j), float(k));
                vec3 point_position = cell_offset + noise3(cell_position + cell_offset) * randomness;
                float distance_to_point = distance(point_position, local_position);
                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smooth_distance - distance_to_point) / smoothness);
                float correction_factor = smoothness * h * (1.0 - h);
                smooth_distance = mix(smooth_distance, distance_to_point, h) - correction_factor;

            }
        }
    }
    return smooth_distance;
}"
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -660, 540 )
nodes/fragment/3/size = Vector2( 685, 342 )
nodes/fragment/3/input_ports = "0,1,Vector;1,0,Scale;2,0,Randomness;3,0,Smoothness;"
nodes/fragment/3/output_ports = "0,0,Fac;"
nodes/fragment/3/expression = "Fac = smoothVoronoi(Vector, Scale, Randomness, Smoothness);"
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -940, 640 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -980, 740 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -980, 840 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -1040, 460 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -1280, 560 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1242, 475.5 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 7, 0, 3, 3, 6, 0, 3, 2, 5, 0, 3, 1, 8, 0, 3, 0, 9, 0, 8, 1, 10, 0, 8, 0 )
