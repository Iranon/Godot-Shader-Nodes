[gd_resource type="VisualShader" load_steps=9 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeGlobalExpression" id=2]
size = Vector2( 963, 307 )
expression = "/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_map_range.glsl
_______________________________________________________________________________________________________________________________________*/

float steppedLinear(float value, float from_min, float from_max, float to_min, float to_max, float steps) {
    float result = 0.0;
    
    if (from_max != from_min) {
        float factor = (value - from_min) / (from_max - from_min);
        factor = (steps > 0.0) ? floor(factor * (steps + 1.0)) / steps : 0.0;
        result = to_min + factor * (to_max - to_min);
    }

    return result;
}"

[sub_resource type="VisualShaderNodeExpression" id=3]
size = Vector2( 886, 351 )
expression = "Fac = steppedLinear(Value, From_Min, From_Max, To_Min, To_Max, Steps);"

[sub_resource type="VisualShaderNodeScalarConstant" id=4]

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=6]

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
constant = 3.0

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;



// GlobalExpression:0
	/* === Based on The Blender Foundation shader
	@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_map_range.glsl
	_______________________________________________________________________________________________________________________________________*/
	
	float steppedLinear(float value, float from_min, float from_max, float to_min, float to_max, float steps) {
	    float result = 0.0;
	    
	    if (from_max != from_min) {
	        float factor = (value - from_min) / (from_max - from_min);
	        factor = (steps > 0.0) ? floor(factor * (steps + 1.0)) / steps : 0.0;
	        result = to_min + factor * (to_max - to_min);
	    }
	
	    return result;
	}

void vertex() {
// Output:0

}

void fragment() {
// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 0.000000;

// Scalar:6
	float n_out6p0 = 1.000000;

// Scalar:7
	float n_out7p0 = 0.000000;

// Scalar:8
	float n_out8p0 = 1.000000;

// Scalar:9
	float n_out9p0 = 3.000000;

// Expression:3
	float n_out3p0;
	n_out3p0 = 0.0;
	{
		n_out3p0 = steppedLinear(dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333)), n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out9p0);
	}

// Output:0
	ALBEDO = vec3(n_out3p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1282.34, -94.4 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -600, -240 )
nodes/fragment/2/size = Vector2( 963, 307 )
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = ""
nodes/fragment/2/expression = "/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_map_range.glsl
_______________________________________________________________________________________________________________________________________*/

float steppedLinear(float value, float from_min, float from_max, float to_min, float to_max, float steps) {
    float result = 0.0;
    
    if (from_max != from_min) {
        float factor = (value - from_min) / (from_max - from_min);
        factor = (steps > 0.0) ? floor(factor * (steps + 1.0)) / steps : 0.0;
        result = to_min + factor * (to_max - to_min);
    }

    return result;
}"
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -600, 100 )
nodes/fragment/3/size = Vector2( 886, 351 )
nodes/fragment/3/input_ports = "0,0,Value;1,0,From_Min;2,0,From_Max;3,0,To_Min;4,0,To_Max;5,0,Steps;"
nodes/fragment/3/output_ports = "0,0,Fac;"
nodes/fragment/3/expression = "Fac = steppedLinear(Value, From_Min, From_Max, To_Min, To_Max, Steps);"
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -920, 120 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -920, 200 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -920, 280 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -920, 380 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -920, 500 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -900, 20 )
nodes/fragment/connections = PoolIntArray( 5, 0, 3, 1, 6, 0, 3, 2, 7, 0, 3, 3, 8, 0, 3, 4, 3, 0, 0, 0, 9, 0, 3, 5, 10, 0, 3, 0 )
